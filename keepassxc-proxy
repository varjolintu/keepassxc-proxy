#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Copyright (c) 2017 Sami VÃ¤nttinen <sami.vanttinen@protonmail.com>
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import struct
import sys
import json
import threading
import socket
import queue
import tkinter

udpSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
udpSocket.settimeout(1)
serverPort = 19700

# On Windows, the default I/O mode is O_TEXT. Set this to O_BINARY
# to avoid unwanted modifications of the input/output streams.
if sys.platform == "win32":
  import os, msvcrt
  msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
  msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)


def send_message(message):
  sys.stdout.write(struct.pack('I', len(message)))
  sys.stdout.write(message)
  sys.stdout.flush()



def read_thread_func(queue):
  message_number = 0
  while 1:
    text_length_bytes = sys.stdin.read(4)

    if len(text_length_bytes) == 0:
      if queue:
        queue.put(None)
      sys.exit(0)

    text_length = struct.unpack('i', text_length_bytes)[0]
    text = sys.stdin.read(text_length).decode('utf-8')

    if queue:
      queue.put(text)


class NativeMessagingWindow(tkinter.Frame):
  def __init__(self, queue):
    self.queue = queue

    tkinter.Frame.__init__(self)
    self.pack()

    self.text = tkinter.Text(self)
    self.text.configure(font=("Courier New", 12))
    self.text.grid(row=0, column=0, padx=10, pady=10, columnspan=2)
    self.text.config(state=tkinter.DISABLED, height=20, width=80)
    self.messageContent = tkinter.StringVar()
    self.after(100, self.processMessages) 

  def processMessages(self):
    while not self.queue.empty():
      message = self.queue.get_nowait()
      if message == None:
        self.quit()
        return
      self.log("Received %s" % message)

      # Handle requests from keepassxc-browser.
      messageJSON = json.loads(message)
      if messageJSON['action']:
        if messageJSON['action'] == "change-public-keys" and messageJSON['proxyPort']:
          self.log("Proxy port changed")
          #serverPort = messageJSON['proxyPort']

        udpSocket.sendto(message, ('localhost', serverPort))
        try:
          resp, server = udpSocket.recvfrom(4096)
          rawResp = "Response: {}".format(resp)
          self.log("Response: {}".format(rawResp))
          try:
            send_message(resp)
          except IOError:
            self.log("Failed to send message.")
        except socket.timeout:
          self.log("Receive timeout")
          msg = json.dumps({"action": messageJSON['action'], "error": "Not connected with KeePassXC.", "errorCode": 5})
          send_message(msg)

    self.after(10, self.processMessages)

  def log(self, message):
    self.text.config(state=tkinter.NORMAL)
    self.text.insert(tkinter.END, message + "\n")
    self.text.config(state=tkinter.DISABLED)


def Main():
  pQueue = queue.Queue()

  main_window = NativeMessagingWindow(pQueue)
  main_window.master.title('keepassxc-proxy')
 
  messageThread = threading.Thread(target=read_thread_func, args=(queue,))
  messageThread.daemon = True
  messageThread.start()

  main_window.mainloop()
  udpSocket.close()
  sys.exit(0)


if __name__ == '__main__':
  Main()
